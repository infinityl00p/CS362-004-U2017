************** Testing Card: smithy ***************
handcount = 6, expected = 7
deckCount = 3, expected = 2
************** Testing Card: adventurer ***************
handcount = 7, expected = 6
deckCount = 2, expected = 3
treasurer cards = 4, expected >= 2
************** Testing Card: village ***************
handcount = 5, expected = 5
deckCount = 4, expected = 4
numActions = 5, expected = 3
************** Testing Card: councilroom ***************
handcount = 8, expected = 8
deckCount = 1, expected = 1
numBuys = 3, expected = 2
**************unittest1 - isGameOver PASSED***************
**************unittest2 - whoseTurn PASSED ***************
**************unittest3 - handCount  PASSED ***************
**************unittest4 - fullDeckCount PASSED***************
File 'dominion.c'
Lines executed:34.51% of 649
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
     3166:    9:	if (*(int*)a > *(int*)b)
      448:   10:		return 1;
     2718:   11:	if (*(int*)a < *(int*)b)
      684:   12:		return -1;
     2034:   13:	return 0;
     3166:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:	return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		int k8, int k9, int k10) {
    #####:   23:	int* k = malloc(10 * sizeof(int));
    #####:   24:	k[0] = k1;
    #####:   25:	k[1] = k2;
    #####:   26:	k[2] = k3;
    #####:   27:	k[3] = k4;
    #####:   28:	k[4] = k5;
    #####:   29:	k[5] = k6;
    #####:   30:	k[6] = k7;
    #####:   31:	k[7] = k8;
    #####:   32:	k[8] = k9;
    #####:   33:	k[9] = k10;
    #####:   34:	return k;
        -:   35:}
        -:   36:
        -:   37:int smithyAction(int currentPlayer, struct gameState *state, int handPos) {
        -:   38:	int i;
        -:   39:	//+3 Cards
        6:   40:	for (i = 0; i < 2; i++) {
        2:   41:		drawCard(currentPlayer, state);
        2:   42:	}
        -:   43:
        -:   44:	//discard card from hand
        1:   45:	discardCard(handPos, currentPlayer, state, 0);
        1:   46:	return 0;
        -:   47:}
        -:   48:
        -:   49:int adventurerAction(int drawntreasure, struct gameState *state, int currentPlayer, int temphand[]){
        1:   50:	int z = 0;
        -:   51:	int cardDrawn;
        -:   52:
        8:   53:	while(drawntreasure<2){
        3:   54:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:   55:			shuffle(currentPlayer, state);
    #####:   56:		}
        3:   57:		drawCard(currentPlayer, state);
        3:   58:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        5:   59:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        2:   60:			drawntreasure++;
        -:   61:		else{
        1:   62:			temphand[z]=cardDrawn;
        1:   63:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        1:   64:			z++;
        -:   65:		}
        -:   66:	}
        4:   67:	while(z-1>=0){
        1:   68:		state->discard[currentPlayer][state->discardCount[currentPlayer]--]=temphand[z-1]; // discard all cards in play that have been drawn
        1:   69:		z=z-1;
        -:   70:	}
        1:   71:	return 0;
        -:   72:}
        -:   73:
        -:   74:int councilRoomAction(int currentPlayer, struct gameState *state, int handPos){
        -:   75:	int i;
        -:   76:
       10:   77:	for (i = 0; i < 4; i++)
        -:   78:	{
        4:   79:		drawCard(currentPlayer, state);
        4:   80:	}
        -:   81:
        -:   82:	//+1 Buy
        1:   83:	state->numBuys+= 2;
        -:   84:
        -:   85:	//Each other player draws a card
        6:   86:	for (i = 0; i < state->numPlayers; i++)
        -:   87:	{
        2:   88:		if ( i != currentPlayer )
        -:   89:		{
        1:   90:			drawCard(i, state);
        1:   91:		}
        2:   92:	}
        -:   93:
        -:   94:	//put played card in played card pile
        1:   95:	discardCard(handPos, currentPlayer, state, 0);
        -:   96:
        1:   97:	return 0;
        -:   98:}
        -:   99:
        -:  100:int villageAction(int currentPlayer, struct gameState *state, int handPos) {
        -:  101:	//+1 Card
        1:  102:	drawCard(currentPlayer, state);
        -:  103:
        -:  104:	//+2 Actions
        1:  105:	state->numActions = state->numActions + 4;
        -:  106:
        -:  107:	//discard played card from hand
        1:  108:	discardCard(handPos, currentPlayer, state, 0);
        1:  109:	return 0;
        -:  110:}
        -:  111:
        -:  112:int baronAction(struct gameState *state, int choice1, int currentPlayer) {
    #####:  113:	state->numBuys++;//Increase buys by 1!
    #####:  114:	if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  115:		int p = 0;//Iterator for hand!
    #####:  116:		int card_not_discarded = 1;//Flag for discard set!
    #####:  117:		while(card_not_discarded){
    #####:  118:			if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  119:				state->coins += 4;//Add 4 coins to the amount of coins
    #####:  120:				state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  121:				state->discardCount[currentPlayer]++;
    #####:  122:				for (;p < state->handCount[currentPlayer]; p++){
    #####:  123:					state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  124:				}
    #####:  125:				state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  126:				state->handCount[currentPlayer]--;
    #####:  127:				card_not_discarded = 0;//Exit the loop
    #####:  128:			}
    #####:  129:			else if (p > state->handCount[currentPlayer]){
        -:  130:				if(DEBUG) {
        -:  131:					printf("No estate cards in your hand, invalid choice\n");
        -:  132:					printf("Must gain an estate if there are any\n");
        -:  133:				}
    #####:  134:				if (supplyCount(estate, state) > 0){
    #####:  135:					gainCard(estate, state, 0, currentPlayer);
    #####:  136:					state->supplyCount[estate]--;//Decrement estates
    #####:  137:					if (supplyCount(estate, state) == 0){
    #####:  138:						isGameOver(state);
    #####:  139:					}
    #####:  140:				}
    #####:  141:				card_not_discarded = 0;//Exit the loop
    #####:  142:			}
        -:  143:
        -:  144:			else{
    #####:  145:				p++;//Next card
        -:  146:			}
        -:  147:		}
    #####:  148:	}
        -:  149:
        -:  150:	else{
    #####:  151:		if (supplyCount(estate, state) > 0){
    #####:  152:			gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  153:			state->supplyCount[estate]--;//Decrement Estates
    #####:  154:			if (supplyCount(estate, state) == 0){
    #####:  155:				isGameOver(state);
    #####:  156:			}
    #####:  157:		}
        -:  158:	}
        -:  159:
        -:  160:
    #####:  161:	return 0;
        -:  162:			}
        -:  163:
        -:  164:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  165:		struct gameState *state) {
        -:  166:
        -:  167:	int i;
        -:  168:	int j;
        -:  169:	int it;
        -:  170:	//set up random number generator
        8:  171:	SelectStream(1);
        8:  172:	PutSeed((long)randomSeed);
        -:  173:
        -:  174:	//check number of players
       16:  175:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  176:	{
    #####:  177:		return -1;
        -:  178:	}
        -:  179:
        -:  180:	//set number of players
        8:  181:	state->numPlayers = numPlayers;
        -:  182:
        -:  183:	//check selected kingdom cards are different
      176:  184:	for (i = 0; i < 10; i++)
        -:  185:	{
     1760:  186:		for (j = 0; j < 10; j++)
        -:  187:		{
     1520:  188:			if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  189:			{
    #####:  190:				return -1;
        -:  191:			}
      800:  192:		}
       80:  193:	}
        -:  194:
        -:  195:
        -:  196:	//initialize supply
        -:  197:	///////////////////////////////
        -:  198:
        -:  199:	//set number of Curse cards
        8:  200:	if (numPlayers == 2)
        -:  201:	{
        8:  202:		state->supplyCount[curse] = 10;
        8:  203:	}
    #####:  204:	else if (numPlayers == 3)
        -:  205:	{
    #####:  206:		state->supplyCount[curse] = 20;
    #####:  207:	}
        -:  208:	else
        -:  209:	{
    #####:  210:		state->supplyCount[curse] = 30;
        -:  211:	}
        -:  212:
        -:  213:	//set number of Victory cards
        8:  214:	if (numPlayers == 2)
        -:  215:	{
        8:  216:		state->supplyCount[estate] = 8;
        8:  217:		state->supplyCount[duchy] = 8;
        8:  218:		state->supplyCount[province] = 8;
        8:  219:	}
        -:  220:	else
        -:  221:	{
    #####:  222:		state->supplyCount[estate] = 12;
    #####:  223:		state->supplyCount[duchy] = 12;
    #####:  224:		state->supplyCount[province] = 12;
        -:  225:	}
        -:  226:
        -:  227:	//set number of Treasure cards
        8:  228:	state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  229:	state->supplyCount[silver] = 40;
        8:  230:	state->supplyCount[gold] = 30;
        -:  231:
        -:  232:	//set number of Kingdom cards
      336:  233:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  234:	{
     2640:  235:		for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  236:		{
     1240:  237:			if (kingdomCards[j] == i)
        -:  238:			{
        -:  239:				//check if card is a 'Victory' Kingdom card
      152:  240:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  241:				{
       16:  242:					if (numPlayers == 2){
       16:  243:						state->supplyCount[i] = 8;
       16:  244:					}
    #####:  245:					else{ state->supplyCount[i] = 12; }
       16:  246:				}
        -:  247:				else
        -:  248:				{
       64:  249:					state->supplyCount[i] = 10;
        -:  250:				}
       80:  251:				break;
        -:  252:			}
        -:  253:			else    //card is not in the set choosen for the game
        -:  254:			{
     1160:  255:				state->supplyCount[i] = -1;
        -:  256:			}
     1160:  257:		}
        -:  258:
      160:  259:	}
        -:  260:
        -:  261:	////////////////////////
        -:  262:	//supply intilization complete
        -:  263:
        -:  264:	//set player decks
       48:  265:	for (i = 0; i < numPlayers; i++)
        -:  266:	{
       16:  267:		state->deckCount[i] = 0;
      128:  268:		for (j = 0; j < 3; j++)
        -:  269:		{
       48:  270:			state->deck[i][j] = estate;
       48:  271:			state->deckCount[i]++;
       48:  272:		}
      256:  273:		for (j = 3; j < 10; j++)
        -:  274:		{
      112:  275:			state->deck[i][j] = copper;
      112:  276:			state->deckCount[i]++;
      112:  277:		}
       16:  278:	}
        -:  279:
        -:  280:	//shuffle player decks
       48:  281:	for (i = 0; i < numPlayers; i++)
        -:  282:	{
       16:  283:		if ( shuffle(i, state) < 0 )
        -:  284:		{
    #####:  285:			return -1;
        -:  286:		}
       16:  287:	}
        -:  288:
        -:  289:	//draw player hands
       48:  290:	for (i = 0; i < numPlayers; i++)
        -:  291:	{
        -:  292:		//initialize hand size to zero
       16:  293:		state->handCount[i] = 0;
       16:  294:		state->discardCount[i] = 0;
        -:  295:		//draw 5 cards
        -:  296:		// for (j = 0; j < 5; j++)
        -:  297:		//	{
        -:  298:		//	  drawCard(i, state);
        -:  299:		//	}
       16:  300:	}
        -:  301:
        -:  302:	//set embargo tokens to 0 for all supply piles
      448:  303:	for (i = 0; i <= treasure_map; i++)
        -:  304:	{
      216:  305:		state->embargoTokens[i] = 0;
      216:  306:	}
        -:  307:
        -:  308:	//initialize first player's turn
        8:  309:	state->outpostPlayed = 0;
        8:  310:	state->phase = 0;
        8:  311:	state->numActions = 1;
        8:  312:	state->numBuys = 1;
        8:  313:	state->playedCardCount = 0;
        8:  314:	state->whoseTurn = 0;
        8:  315:	state->handCount[state->whoseTurn] = 0;
        -:  316:	//int it; move to top
        -:  317:
        -:  318:	//Moved draw cards to here, only drawing at the start of a turn
       96:  319:	for (it = 0; it < 5; it++){
       40:  320:		drawCard(state->whoseTurn, state);
       40:  321:	}
        -:  322:
        8:  323:	updateCoins(state->whoseTurn, state, 0);
        -:  324:
        8:  325:	return 0;
        8:  326:}
        -:  327:
        -:  328:int shuffle(int player, struct gameState *state) {
        -:  329:
        -:  330:
        -:  331:	int newDeck[MAX_DECK];
      214:  332:	int newDeckPos = 0;
        -:  333:	int card;
        -:  334:	int i;
        -:  335:
      214:  336:	if (state->deckCount[player] < 1)
    #####:  337:		return -1;
      214:  338:	qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  339:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  340:
     4708:  341:	while (state->deckCount[player] > 0) {
     2140:  342:		card = floor(Random() * state->deckCount[player]);
     2140:  343:		newDeck[newDeckPos] = state->deck[player][card];
     2140:  344:		newDeckPos++;
    14044:  345:		for (i = card; i < state->deckCount[player]-1; i++) {
     4882:  346:			state->deck[player][i] = state->deck[player][i+1];
     4882:  347:		}
     2140:  348:		state->deckCount[player]--;
        -:  349:	}
     4708:  350:	for (i = 0; i < newDeckPos; i++) {
     2140:  351:		state->deck[player][i] = newDeck[i];
     2140:  352:		state->deckCount[player]++;
     2140:  353:	}
        -:  354:
      214:  355:	return 0;
      214:  356:}
        -:  357:
        -:  358:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  359:{
        -:  360:	int card;
    #####:  361:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  362:
        -:  363:	//check if it is the right phase
    #####:  364:	if (state->phase != 0)
        -:  365:	{
    #####:  366:		return -1;
        -:  367:	}
        -:  368:
        -:  369:	//check if player has enough actions
    #####:  370:	if ( state->numActions < 1 )
        -:  371:	{
    #####:  372:		return -1;
        -:  373:	}
        -:  374:
        -:  375:	//get card played
    #####:  376:	card = handCard(handPos, state);
        -:  377:
        -:  378:	//check if selected card is an action
    #####:  379:	if ( card < adventurer || card > treasure_map )
        -:  380:	{
    #####:  381:		return -1;
        -:  382:	}
        -:  383:
        -:  384:	//play card
    #####:  385:	if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  386:	{
    #####:  387:		return -1;
        -:  388:	}
        -:  389:
        -:  390:	//reduce number of actions
    #####:  391:	state->numActions--;
        -:  392:
        -:  393:	//update coins (Treasure cards may be added with card draws)
    #####:  394:	updateCoins(state->whoseTurn, state, coin_bonus);
        -:  395:
    #####:  396:	return 0;
    #####:  397:}
        -:  398:
        -:  399:int buyCard(int supplyPos, struct gameState *state) {
        -:  400:	int who;
        -:  401:	if (DEBUG){
        -:  402:		printf("Entering buyCard...\n");
        -:  403:	}
        -:  404:
        -:  405:	// I don't know what to do about the phase thing.
        -:  406:
    #####:  407:	who = state->whoseTurn;
        -:  408:
    #####:  409:	if (state->numBuys < 1){
        -:  410:		if (DEBUG)
        -:  411:			printf("You do not have any buys left\n");
    #####:  412:		return -1;
    #####:  413:	} else if (supplyCount(supplyPos, state) <1){
        -:  414:		if (DEBUG)
        -:  415:			printf("There are not any of that type of card left\n");
    #####:  416:		return -1;
    #####:  417:	} else if (state->coins < getCost(supplyPos)){
        -:  418:		if (DEBUG)
        -:  419:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  420:		return -1;
        -:  421:	} else {
    #####:  422:		state->phase=1;
        -:  423:		//state->supplyCount[supplyPos]--;
    #####:  424:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  425:
    #####:  426:		state->coins = (state->coins) - (getCost(supplyPos));
    #####:  427:		state->numBuys--;
        -:  428:		if (DEBUG)
        -:  429:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  430:	}
        -:  431:
        -:  432:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  433:	//state->discardCount[who]++;
        -:  434:
    #####:  435:	return 0;
    #####:  436:}
        -:  437:
        -:  438:int numHandCards(struct gameState *state) {
    #####:  439:	return state->handCount[ whoseTurn(state) ];
        -:  440:}
        -:  441:
        -:  442:int handCard(int handPos, struct gameState *state) {
    #####:  443:	int currentPlayer = whoseTurn(state);
    #####:  444:	return state->hand[currentPlayer][handPos];
        -:  445:}
        -:  446:
        -:  447:int supplyCount(int card, struct gameState *state) {
    #####:  448:	return state->supplyCount[card];
        -:  449:}
        -:  450:
        -:  451:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  452:	int i;
        1:  453:	int count = 0;
        -:  454:
       12:  455:	for (i = 0; i < state->deckCount[player]; i++)
        -:  456:	{
        5:  457:		if (state->deck[player][i] == card) count++;
        5:  458:	}
        -:  459:
       12:  460:	for (i = 0; i < state->handCount[player]; i++)
        -:  461:	{
        5:  462:		if (state->hand[player][i] == card) count++;
        5:  463:	}
        -:  464:
        2:  465:	for (i = 0; i < state->discardCount[player]; i++)
        -:  466:	{
    #####:  467:		if (state->discard[player][i] == card) count++;
    #####:  468:	}
        -:  469:
        1:  470:	return count;
        -:  471:}
        -:  472:
        -:  473:int whoseTurn(struct gameState *state) {
      605:  474:	return state->whoseTurn;
        -:  475:}
        -:  476:
        -:  477:int endTurn(struct gameState *state) {
        -:  478:	int k;
        -:  479:	int i;
      400:  480:	int currentPlayer = whoseTurn(state);
        -:  481:
        -:  482:	//Discard hand
     4800:  483:	for (i = 0; i < state->handCount[currentPlayer]; i++){
     2000:  484:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
     2000:  485:		state->hand[currentPlayer][i] = -1;//Set card to -1
     2000:  486:	}
      400:  487:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  488:
        -:  489:	//Code for determining the player
      400:  490:	if (currentPlayer < (state->numPlayers - 1)){
      200:  491:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
      200:  492:	}
        -:  493:	else{
      200:  494:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  495:	}
        -:  496:
      400:  497:	state->outpostPlayed = 0;
      400:  498:	state->phase = 0;
      400:  499:	state->numActions = 1;
      400:  500:	state->coins = 0;
      400:  501:	state->numBuys = 1;
      400:  502:	state->playedCardCount = 0;
      400:  503:	state->handCount[state->whoseTurn] = 0;
        -:  504:
        -:  505:	//int k; move to top
        -:  506:	//Next player draws hand
     4800:  507:	for (k = 0; k < 5; k++){
     2000:  508:		drawCard(state->whoseTurn, state);//Draw a card
     2000:  509:	}
        -:  510:
        -:  511:	//Update money
      400:  512:	updateCoins(state->whoseTurn, state , 0);
        -:  513:
      400:  514:	return 0;
        -:  515:}
        -:  516:
        -:  517:int isGameOver(struct gameState *state) {
        -:  518:	int i;
        -:  519:	int j;
        -:  520:
        -:  521:	//if stack of Province cards is empty, the game ends
        1:  522:	if (state->supplyCount[province] == 0)
        -:  523:	{
    #####:  524:		return 1;
        -:  525:	}
        -:  526:
        -:  527:	//if three supply pile are at 0, the game ends
        1:  528:	j = 0;
       52:  529:	for (i = 0; i < 25; i++)
        -:  530:	{
       25:  531:		if (state->supplyCount[i] == 0)
        -:  532:		{
    #####:  533:			j++;
    #####:  534:		}
       25:  535:	}
        1:  536:	if ( j >= 3)
        -:  537:	{
    #####:  538:		return 1;
        -:  539:	}
        -:  540:
        1:  541:	return 0;
        1:  542:}
        -:  543:
        -:  544:int scoreFor (int player, struct gameState *state) {
        -:  545:
        -:  546:	int i;
    #####:  547:	int score = 0;
        -:  548:	//score from hand
    #####:  549:	for (i = 0; i < state->handCount[player]; i++)
        -:  550:	{
    #####:  551:		if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  552:		if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  553:		if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  554:		if (state->hand[player][i] == province) { score = score + 6; };
    #####:  555:		if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  556:		if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  557:	}
        -:  558:
        -:  559:	//score from discard
    #####:  560:	for (i = 0; i < state->discardCount[player]; i++)
        -:  561:	{
    #####:  562:		if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  563:		if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  564:		if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  565:		if (state->discard[player][i] == province) { score = score + 6; };
    #####:  566:		if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  567:		if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  568:	}
        -:  569:
        -:  570:	//score from deck
    #####:  571:	for (i = 0; i < state->discardCount[player]; i++)
        -:  572:	{
    #####:  573:		if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  574:		if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  575:		if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  576:		if (state->deck[player][i] == province) { score = score + 6; };
    #####:  577:		if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  578:		if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  579:	}
        -:  580:
    #####:  581:	return score;
        -:  582:}
        -:  583:
        -:  584:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  585:	int i;
        -:  586:	int j;
        -:  587:	int highScore;
        -:  588:	int currentPlayer;
        -:  589:
        -:  590:	//get score for each player
    #####:  591:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  592:	{
        -:  593:		//set unused player scores to -9999
    #####:  594:		if (i >= state->numPlayers)
        -:  595:		{
    #####:  596:			players[i] = -9999;
    #####:  597:		}
        -:  598:		else
        -:  599:		{
    #####:  600:			players[i] = scoreFor (i, state);
        -:  601:		}
    #####:  602:	}
        -:  603:
        -:  604:	//find highest score
    #####:  605:	j = 0;
    #####:  606:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  607:	{
    #####:  608:		if (players[i] > players[j])
        -:  609:		{
    #####:  610:			j = i;
    #####:  611:		}
    #####:  612:	}
    #####:  613:	highScore = players[j];
        -:  614:
        -:  615:	//add 1 to players who had less turns
    #####:  616:	currentPlayer = whoseTurn(state);
    #####:  617:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  618:	{
    #####:  619:		if ( players[i] == highScore && i > currentPlayer )
        -:  620:		{
    #####:  621:			players[i]++;
    #####:  622:		}
    #####:  623:	}
        -:  624:
        -:  625:	//find new highest score
    #####:  626:	j = 0;
    #####:  627:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  628:	{
    #####:  629:		if ( players[i] > players[j] )
        -:  630:		{
    #####:  631:			j = i;
    #####:  632:		}
    #####:  633:	}
    #####:  634:	highScore = players[j];
        -:  635:
        -:  636:	//set winners in array to 1 and rest to 0
    #####:  637:	for (i = 0; i < MAX_PLAYERS; i++)
        -:  638:	{
    #####:  639:		if ( players[i] == highScore )
        -:  640:		{
    #####:  641:			players[i] = 1;
    #####:  642:		}
        -:  643:		else
        -:  644:		{
    #####:  645:			players[i] = 0;
        -:  646:		}
    #####:  647:	}
        -:  648:
    #####:  649:	return 0;
        -:  650:}
        -:  651:
        -:  652:int drawCard(int player, struct gameState *state)
        -:  653:{	int count;
        -:  654:	int deckCounter;
     2051:  655:	if (state->deckCount[player] <= 0){//Deck is empty
        -:  656:
        -:  657:		//Step 1 Shuffle the discard pile back into a deck
        -:  658:		int i;
        -:  659:		//Move discard to deck
     4356:  660:		for (i = 0; i < state->discardCount[player];i++){
     1980:  661:			state->deck[player][i] = state->discard[player][i];
     1980:  662:			state->discard[player][i] = -1;
     1980:  663:		}
        -:  664:
      198:  665:		state->deckCount[player] = state->discardCount[player];
      198:  666:		state->discardCount[player] = 0;//Reset discard
        -:  667:
        -:  668:		//Shufffle the deck
      198:  669:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  670:
        -:  671:		if (DEBUG){//Debug statements
        -:  672:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  673:		}
        -:  674:
      198:  675:		state->discardCount[player] = 0;
        -:  676:
        -:  677:		//Step 2 Draw Card
      198:  678:		count = state->handCount[player];//Get current player's hand count
        -:  679:
        -:  680:		if (DEBUG){//Debug statements
        -:  681:			printf("Current hand count: %d\n", count);
        -:  682:		}
        -:  683:
      198:  684:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  685:
      198:  686:		if (deckCounter == 0)
    #####:  687:			return -1;
        -:  688:
      198:  689:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      198:  690:		state->deckCount[player]--;
      198:  691:		state->handCount[player]++;//Increment hand count
      198:  692:	}
        -:  693:
        -:  694:	else{
     1853:  695:		int count = state->handCount[player];//Get current hand count for player
        -:  696:		int deckCounter;
        -:  697:		if (DEBUG){//Debug statements
        -:  698:			printf("Current hand count: %d\n", count);
        -:  699:		}
        -:  700:
     1853:  701:		deckCounter = state->deckCount[player];//Create holder for the deck count
     1853:  702:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     1853:  703:		state->deckCount[player]--;
     1853:  704:		state->handCount[player]++;//Increment hand count
        -:  705:	}
        -:  706:
     2051:  707:	return 0;
     2051:  708:}
        -:  709:
        -:  710:int getCost(int cardNumber)
        -:  711:{
    #####:  712:	switch( cardNumber )
        -:  713:	{
        -:  714:		case curse:
    #####:  715:			return 0;
        -:  716:		case estate:
    #####:  717:			return 2;
        -:  718:		case duchy:
    #####:  719:			return 5;
        -:  720:		case province:
    #####:  721:			return 8;
        -:  722:		case copper:
    #####:  723:			return 0;
        -:  724:		case silver:
    #####:  725:			return 3;
        -:  726:		case gold:
    #####:  727:			return 6;
        -:  728:		case adventurer:
    #####:  729:			return 6;
        -:  730:		case council_room:
    #####:  731:			return 5;
        -:  732:		case feast:
    #####:  733:			return 4;
        -:  734:		case gardens:
    #####:  735:			return 4;
        -:  736:		case mine:
    #####:  737:			return 5;
        -:  738:		case remodel:
    #####:  739:			return 4;
        -:  740:		case smithy:
    #####:  741:			return 4;
        -:  742:		case village:
    #####:  743:			return 3;
        -:  744:		case baron:
    #####:  745:			return 4;
        -:  746:		case great_hall:
    #####:  747:			return 3;
        -:  748:		case minion:
    #####:  749:			return 5;
        -:  750:		case steward:
    #####:  751:			return 3;
        -:  752:		case tribute:
    #####:  753:			return 5;
        -:  754:		case ambassador:
    #####:  755:			return 3;
        -:  756:		case cutpurse:
    #####:  757:			return 4;
        -:  758:		case embargo:
    #####:  759:			return 2;
        -:  760:		case outpost:
    #####:  761:			return 5;
        -:  762:		case salvager:
    #####:  763:			return 4;
        -:  764:		case sea_hag:
    #####:  765:			return 4;
        -:  766:		case treasure_map:
    #####:  767:			return 4;
        -:  768:	}
        -:  769:
    #####:  770:	return -1;
    #####:  771:}
        -:  772:
        -:  773:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  774:{
        -:  775:	int i;
        -:  776:	int j;
        -:  777:	int k;
        -:  778:	int x;
        -:  779:	int index;
        4:  780:	int currentPlayer = whoseTurn(state);
        4:  781:	int nextPlayer = currentPlayer + 1;
        -:  782:
        4:  783:	int tributeRevealedCards[2] = {-1, -1};
        -:  784:	int temphand[MAX_HAND];// moved above the if statement
        4:  785:	int drawntreasure=0;
        4:  786:	if (nextPlayer > (state->numPlayers - 1)){
    #####:  787:		nextPlayer = 0;
    #####:  788:	}
        -:  789:
        -:  790:
        -:  791:	//uses switch to select card and perform actions
        8:  792:	switch( card )
        -:  793:	{
        -:  794:		case adventurer:
        1:  795:			adventurerAction(drawntreasure, state, currentPlayer, temphand);
        1:  796:			break;
        -:  797:
        -:  798:		case council_room:
        1:  799:			councilRoomAction(currentPlayer, state, handPos);
        1:  800:			break;
        -:  801:
        -:  802:		case feast:
        -:  803:			//gain card with cost up to 5
        -:  804:			//Backup hand
    #####:  805:			for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  806:				temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  807:				state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  808:			}
        -:  809:			//Backup hand
        -:  810:
        -:  811:			//Update Coins for Buy
    #####:  812:			updateCoins(currentPlayer, state, 5);
    #####:  813:			x = 1;//Condition to loop on
    #####:  814:			while( x == 1) {//Buy one card
    #####:  815:				if (supplyCount(choice1, state) <= 0){
        -:  816:					if (DEBUG)
        -:  817:						printf("None of that card left, sorry!\n");
        -:  818:
        -:  819:					if (DEBUG){
        -:  820:						printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  821:					}
    #####:  822:				}
    #####:  823:				else if (state->coins < getCost(choice1)){
    #####:  824:					printf("That card is too expensive!\n");
        -:  825:
        -:  826:					if (DEBUG){
        -:  827:						printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  828:					}
    #####:  829:				}
        -:  830:				else{
        -:  831:
        -:  832:					if (DEBUG){
        -:  833:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  834:					}
        -:  835:
    #####:  836:					gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  837:					x = 0;//No more buying cards
        -:  838:
        -:  839:					if (DEBUG){
        -:  840:						printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  841:					}
        -:  842:
        -:  843:				}
        -:  844:			}
        -:  845:
        -:  846:			//Reset Hand
    #####:  847:			for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  848:				state->hand[currentPlayer][i] = temphand[i];
    #####:  849:				temphand[i] = -1;
    #####:  850:			}
        -:  851:			//Reset Hand
        -:  852:
    #####:  853:			return 0;
        -:  854:
        -:  855:		case gardens:
    #####:  856:			return -1;
        -:  857:
        -:  858:		case mine:
    #####:  859:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  860:
    #####:  861:			if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  862:			{
    #####:  863:				return -1;
        -:  864:			}
        -:  865:
    #####:  866:			if (choice2 > treasure_map || choice2 < curse)
        -:  867:			{
    #####:  868:				return -1;
        -:  869:			}
        -:  870:
    #####:  871:			if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  872:			{
    #####:  873:				return -1;
        -:  874:			}
        -:  875:
    #####:  876:			gainCard(choice2, state, 2, currentPlayer);
        -:  877:
        -:  878:			//discard card from hand
    #####:  879:			discardCard(handPos, currentPlayer, state, 0);
        -:  880:
        -:  881:			//discard trashed card
    #####:  882:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  883:			{
    #####:  884:				if (state->hand[currentPlayer][i] == j)
        -:  885:				{
    #####:  886:					discardCard(i, currentPlayer, state, 0);
    #####:  887:					break;
        -:  888:				}
    #####:  889:			}
        -:  890:
    #####:  891:			return 0;
        -:  892:
        -:  893:		case remodel:
    #####:  894:			j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  895:
    #####:  896:			if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  897:			{
    #####:  898:				return -1;
        -:  899:			}
        -:  900:
    #####:  901:			gainCard(choice2, state, 0, currentPlayer);
        -:  902:
        -:  903:			//discard card from hand
    #####:  904:			discardCard(handPos, currentPlayer, state, 0);
        -:  905:
        -:  906:			//discard trashed card
    #####:  907:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  908:			{
    #####:  909:				if (state->hand[currentPlayer][i] == j)
        -:  910:				{
    #####:  911:					discardCard(i, currentPlayer, state, 0);
    #####:  912:					break;
        -:  913:				}
    #####:  914:			}
        -:  915:
        -:  916:
    #####:  917:			return 0;
        -:  918:
        -:  919:		case smithy:
        1:  920:			smithyAction(currentPlayer, state, handPos);
        1:  921:			break;
        -:  922:
        -:  923:		case village:
        1:  924:			villageAction(currentPlayer, state, handPos);
        1:  925:			break;
        -:  926:
        -:  927:		case baron:
    #####:  928:			baronAction(state, choice1, currentPlayer);
    #####:  929:			break;
        -:  930:
        -:  931:		case great_hall:
        -:  932:			//+1 Card
    #####:  933:			drawCard(currentPlayer, state);
        -:  934:
        -:  935:			//+1 Actions
    #####:  936:			state->numActions++;
        -:  937:
        -:  938:			//discard card from hand
    #####:  939:			discardCard(handPos, currentPlayer, state, 0);
    #####:  940:			return 0;
        -:  941:
        -:  942:		case minion:
        -:  943:			//+1 action
    #####:  944:			state->numActions++;
        -:  945:
        -:  946:			//discard card from hand
    #####:  947:			discardCard(handPos, currentPlayer, state, 0);
        -:  948:
    #####:  949:			if (choice1)		//+2 coins
        -:  950:			{
    #####:  951:				state->coins = state->coins + 2;
    #####:  952:			}
        -:  953:
    #####:  954:			else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  955:			{
        -:  956:				//discard hand
    #####:  957:				while(numHandCards(state) > 0)
        -:  958:				{
    #####:  959:					discardCard(handPos, currentPlayer, state, 0);
        -:  960:				}
        -:  961:
        -:  962:				//draw 4
    #####:  963:				for (i = 0; i < 4; i++)
        -:  964:				{
    #####:  965:					drawCard(currentPlayer, state);
    #####:  966:				}
        -:  967:
        -:  968:				//other players discard hand and redraw if hand size > 4
    #####:  969:				for (i = 0; i < state->numPlayers; i++)
        -:  970:				{
    #####:  971:					if (i != currentPlayer)
        -:  972:					{
    #####:  973:						if ( state->handCount[i] > 4 )
        -:  974:						{
        -:  975:							//discard hand
    #####:  976:							while( state->handCount[i] > 0 )
        -:  977:							{
    #####:  978:								discardCard(handPos, i, state, 0);
        -:  979:							}
        -:  980:
        -:  981:							//draw 4
    #####:  982:							for (j = 0; j < 4; j++)
        -:  983:							{
    #####:  984:								drawCard(i, state);
    #####:  985:							}
    #####:  986:						}
    #####:  987:					}
    #####:  988:				}
        -:  989:
    #####:  990:			}
    #####:  991:			return 0;
        -:  992:
        -:  993:		case steward:
    #####:  994:			if (choice1 == 1)
        -:  995:			{
        -:  996:				//+2 cards
    #####:  997:				drawCard(currentPlayer, state);
    #####:  998:				drawCard(currentPlayer, state);
    #####:  999:			}
    #####: 1000:			else if (choice1 == 2)
        -: 1001:			{
        -: 1002:				//+2 coins
    #####: 1003:				state->coins = state->coins + 2;
    #####: 1004:			}
        -: 1005:			else
        -: 1006:			{
        -: 1007:				//trash 2 cards in hand
    #####: 1008:				discardCard(choice2, currentPlayer, state, 1);
    #####: 1009:				discardCard(choice3, currentPlayer, state, 1);
        -: 1010:			}
        -: 1011:
        -: 1012:			//discard card from hand
    #####: 1013:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1014:			return 0;
        -: 1015:
        -: 1016:		case tribute:
    #####: 1017:			if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1018:				if (state->deckCount[nextPlayer] > 0){
    #####: 1019:					tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1020:					state->deckCount[nextPlayer]--;
    #####: 1021:				}
    #####: 1022:				else if (state->discardCount[nextPlayer] > 0){
    #####: 1023:					tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1024:					state->discardCount[nextPlayer]--;
    #####: 1025:				}
        -: 1026:				else{
        -: 1027:					//No Card to Reveal
        -: 1028:					if (DEBUG){
        -: 1029:						printf("No cards to reveal\n");
        -: 1030:					}
        -: 1031:				}
    #####: 1032:			}
        -: 1033:
        -: 1034:			else{
    #####: 1035:				if (state->deckCount[nextPlayer] == 0){
    #####: 1036:					for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1037:						state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1038:						state->deckCount[nextPlayer]++;
    #####: 1039:						state->discard[nextPlayer][i] = -1;
    #####: 1040:						state->discardCount[nextPlayer]--;
    #####: 1041:					}
        -: 1042:
    #####: 1043:					shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1044:				}
    #####: 1045:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1046:				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1047:				state->deckCount[nextPlayer]--;
    #####: 1048:				tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:				state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1050:				state->deckCount[nextPlayer]--;
        -: 1051:			}
        -: 1052:
    #####: 1053:			if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1054:				state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1055:				state->playedCardCount++;
    #####: 1056:				tributeRevealedCards[1] = -1;
    #####: 1057:			}
        -: 1058:
    #####: 1059:			for (i = 0; i <= 2; i ++){
    #####: 1060:				if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1061:					state->coins += 2;
    #####: 1062:				}
        -: 1063:
    #####: 1064:				else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1065:					drawCard(currentPlayer, state);
    #####: 1066:					drawCard(currentPlayer, state);
    #####: 1067:				}
        -: 1068:				else{//Action Card
    #####: 1069:					state->numActions = state->numActions + 2;
        -: 1070:				}
    #####: 1071:			}
        -: 1072:
    #####: 1073:			return 0;
        -: 1074:
        -: 1075:		case ambassador:
    #####: 1076:			j = 0;		//used to check if player has enough cards to discard
        -: 1077:
    #####: 1078:			if (choice2 > 2 || choice2 < 0)
        -: 1079:			{
    #####: 1080:				return -1;
        -: 1081:			}
        -: 1082:
    #####: 1083:			if (choice1 == handPos)
        -: 1084:			{
    #####: 1085:				return -1;
        -: 1086:			}
        -: 1087:
    #####: 1088:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1089:			{
    #####: 1090:				if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1091:				{
    #####: 1092:					j++;
    #####: 1093:				}
    #####: 1094:			}
    #####: 1095:			if (j < choice2)
        -: 1096:			{
    #####: 1097:				return -1;
        -: 1098:			}
        -: 1099:
        -: 1100:			if (DEBUG)
        -: 1101:				printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1102:
        -: 1103:			//increase supply count for choosen card by amount being discarded
    #####: 1104:			state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1105:
        -: 1106:			//each other player gains a copy of revealed card
    #####: 1107:			for (i = 0; i < state->numPlayers; i++)
        -: 1108:			{
    #####: 1109:				if (i != currentPlayer)
        -: 1110:				{
    #####: 1111:					gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1112:				}
    #####: 1113:			}
        -: 1114:
        -: 1115:			//discard played card from hand
    #####: 1116:			discardCard(handPos, currentPlayer, state, 0);
        -: 1117:
        -: 1118:			//trash copies of cards returned to supply
    #####: 1119:			for (j = 0; j < choice2; j++)
        -: 1120:			{
    #####: 1121:				for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1122:				{
    #####: 1123:					if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1124:					{
    #####: 1125:						discardCard(i, currentPlayer, state, 1);
    #####: 1126:						break;
        -: 1127:					}
    #####: 1128:				}
    #####: 1129:			}
        -: 1130:
    #####: 1131:			return 0;
        -: 1132:
        -: 1133:		case cutpurse:
        -: 1134:
    #####: 1135:			updateCoins(currentPlayer, state, 2);
    #####: 1136:			for (i = 0; i < state->numPlayers; i++)
        -: 1137:			{
    #####: 1138:				if (i != currentPlayer)
        -: 1139:				{
    #####: 1140:					for (j = 0; j < state->handCount[i]; j++)
        -: 1141:					{
    #####: 1142:						if (state->hand[i][j] == copper)
        -: 1143:						{
    #####: 1144:							discardCard(j, i, state, 0);
    #####: 1145:							break;
        -: 1146:						}
    #####: 1147:						if (j == state->handCount[i])
        -: 1148:						{
    #####: 1149:							for (k = 0; k < state->handCount[i]; k++)
        -: 1150:							{
        -: 1151:								if (DEBUG)
        -: 1152:									printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1153:							}
    #####: 1154:							break;
        -: 1155:						}
    #####: 1156:					}
        -: 1157:
    #####: 1158:				}
        -: 1159:
    #####: 1160:			}
        -: 1161:
        -: 1162:			//discard played card from hand
    #####: 1163:			discardCard(handPos, currentPlayer, state, 0);
        -: 1164:
    #####: 1165:			return 0;
        -: 1166:
        -: 1167:
        -: 1168:		case embargo:
        -: 1169:			//+2 Coins
    #####: 1170:			state->coins = state->coins + 2;
        -: 1171:
        -: 1172:			//see if selected pile is in play
    #####: 1173:			if ( state->supplyCount[choice1] == -1 )
        -: 1174:			{
    #####: 1175:				return -1;
        -: 1176:			}
        -: 1177:
        -: 1178:			//add embargo token to selected supply pile
    #####: 1179:			state->embargoTokens[choice1]++;
        -: 1180:
        -: 1181:			//trash card
    #####: 1182:			discardCard(handPos, currentPlayer, state, 1);
    #####: 1183:			return 0;
        -: 1184:
        -: 1185:		case outpost:
        -: 1186:			//set outpost flag
    #####: 1187:			state->outpostPlayed++;
        -: 1188:
        -: 1189:			//discard card
    #####: 1190:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1191:			return 0;
        -: 1192:
        -: 1193:		case salvager:
        -: 1194:			//+1 buy
    #####: 1195:			state->numBuys++;
        -: 1196:
    #####: 1197:			if (choice1)
        -: 1198:			{
        -: 1199:				//gain coins equal to trashed card
    #####: 1200:				state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1201:				//trash card
    #####: 1202:				discardCard(choice1, currentPlayer, state, 1);
    #####: 1203:			}
        -: 1204:
        -: 1205:			//discard card
    #####: 1206:			discardCard(handPos, currentPlayer, state, 0);
    #####: 1207:			return 0;
        -: 1208:
        -: 1209:		case sea_hag:
    #####: 1210:			for (i = 0; i < state->numPlayers; i++){
    #####: 1211:				if (i != currentPlayer){
    #####: 1212:					state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1213:					state->discardCount[i]++;
    #####: 1214:					state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1215:				}
    #####: 1216:			}
    #####: 1217:			return 0;
        -: 1218:
        -: 1219:		case treasure_map:
        -: 1220:			//search hand for another treasure_map
    #####: 1221:			index = -1;
    #####: 1222:			for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1223:			{
    #####: 1224:				if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1225:				{
    #####: 1226:					index = i;
    #####: 1227:					break;
        -: 1228:				}
    #####: 1229:			}
    #####: 1230:			if (index > -1)
        -: 1231:			{
        -: 1232:				//trash both treasure cards
    #####: 1233:				discardCard(handPos, currentPlayer, state, 1);
    #####: 1234:				discardCard(index, currentPlayer, state, 1);
        -: 1235:
        -: 1236:				//gain 4 Gold cards
    #####: 1237:				for (i = 0; i < 4; i++)
        -: 1238:				{
    #####: 1239:					gainCard(gold, state, 1, currentPlayer);
    #####: 1240:				}
        -: 1241:
        -: 1242:				//return success
    #####: 1243:				return 1;
        -: 1244:			}
        -: 1245:
        -: 1246:			//no second treasure_map found in hand
    #####: 1247:			return -1;
        -: 1248:	}
        -: 1249:
        4: 1250:	return -1;
        4: 1251:}
        -: 1252:
        -: 1253:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1254:{
        -: 1255:
        -: 1256:	//if card is not trashed, added to Played pile
        3: 1257:	if (trashFlag < 1)
        -: 1258:	{
        -: 1259:		//add card to played pile
        3: 1260:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        3: 1261:		state->playedCardCount++;
        3: 1262:	}
        -: 1263:
        -: 1264:	//set played card to -1
        3: 1265:	state->hand[currentPlayer][handPos] = -1;
        -: 1266:
        -: 1267:	//remove card from player's hand
        3: 1268:	if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1269:	{
        -: 1270:		//reduce number of cards in hand
    #####: 1271:		state->handCount[currentPlayer]--;
    #####: 1272:	}
        3: 1273:	else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1274:	{
        -: 1275:		//reduce number of cards in hand
    #####: 1276:		state->handCount[currentPlayer]--;
    #####: 1277:	}
        -: 1278:	else
        -: 1279:	{
        -: 1280:		//replace discarded card with last card in hand
        3: 1281:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1282:		//set last card to -1
        3: 1283:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1284:		//reduce number of cards in hand
        3: 1285:		state->handCount[currentPlayer]--;
        -: 1286:	}
        -: 1287:
        3: 1288:	return 0;
        -: 1289:}
        -: 1290:
        -: 1291:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1292:{
        -: 1293:	//Note: supplyPos is enum of choosen card
        -: 1294:
        -: 1295:	//check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1296:	if ( supplyCount(supplyPos, state) < 1 )
        -: 1297:	{
    #####: 1298:		return -1;
        -: 1299:	}
        -: 1300:
        -: 1301:	//added card for [whoseTurn] current player:
        -: 1302:	// toFlag = 0 : add to discard
        -: 1303:	// toFlag = 1 : add to deck
        -: 1304:	// toFlag = 2 : add to hand
        -: 1305:
    #####: 1306:	if (toFlag == 1)
        -: 1307:	{
    #####: 1308:		state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1309:		state->deckCount[player]++;
    #####: 1310:	}
    #####: 1311:	else if (toFlag == 2)
        -: 1312:	{
    #####: 1313:		state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1314:		state->handCount[player]++;
    #####: 1315:	}
        -: 1316:	else
        -: 1317:	{
    #####: 1318:		state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1319:		state->discardCount[player]++;
        -: 1320:	}
        -: 1321:
        -: 1322:	//decrease number in supply pile
    #####: 1323:	state->supplyCount[supplyPos]--;
        -: 1324:
    #####: 1325:	return 0;
    #####: 1326:}
        -: 1327:
        -: 1328:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1329:{
        -: 1330:	int i;
        -: 1331:
        -: 1332:	//reset coin count
      408: 1333:	state->coins = 0;
        -: 1334:
        -: 1335:	//add coins for each Treasure card in player's hand
     4896: 1336:	for (i = 0; i < state->handCount[player]; i++)
        -: 1337:	{
     2040: 1338:		if (state->hand[player][i] == copper)
        -: 1339:		{
     1430: 1340:			state->coins += 1;
     1430: 1341:		}
      610: 1342:		else if (state->hand[player][i] == silver)
        -: 1343:		{
    #####: 1344:			state->coins += 2;
    #####: 1345:		}
      610: 1346:		else if (state->hand[player][i] == gold)
        -: 1347:		{
    #####: 1348:			state->coins += 3;
    #####: 1349:		}
     2040: 1350:	}
        -: 1351:
        -: 1352:	//add bonus
      408: 1353:	state->coins += bonus;
        -: 1354:
      408: 1355:	return 0;
        -: 1356:}
        -: 1357:
        -: 1358://end of dominion.c
        -: 1359:
